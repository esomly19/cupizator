generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique @db.VarChar(255)
  password  String     @db.VarChar(255)
  firstname String     @db.VarChar(255)
  lastname  String     @db.VarChar(255)
  Pot       Pot?       @relation(fields: [potId], references: [id])
  potId     Int?
  Group     Group?     @relation(fields: [groupId], references: [id])
  groupId   Int?
  Position  Position[]?
  Bet       Bet[]?
}

model Pot {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  tag       String   @db.VarChar(255)
  state     State    @default(CLOSED)
  members   User[]?
  managerId Int?
  type      PotType?
  Group     Group[]?
}

model Group {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(255)
  managerId Int
  pot       Pot?    @relation(fields: [potId], references: [id])
  potId     Int?
  state     State   @default(CREATED)
  members   User[]?
  bets      Bet[]?
  matchs    Match[]?
}

model Position {
  id     Int   @id @default(autoincrement())
  user   User? @relation(fields: [userId], references: [id])
  userId Int
  score  Int?
}

model Bet {
  id        Int      @id @default(autoincrement())
  score     Int?
  vainqueur String?  @db.VarChar(255)
  type      TypeBet?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int
  group     Group?   @relation(fields: [groupId], references: [id])
  groupId   Int
}

model Match {
  id      Int      @id @default(autoincrement())
  date    DateTime
  team1   String?
  team2   String?
  score1  Int?
  score2  Int?
  Group   Group?   @relation(fields: [groupId], references: [id])
  groupId Int?
}

enum Role {
  INVITE
  ADMIN
}

enum TypeBet {
  SCORE
  VAINQUEUR
}

enum PotType {
  MONEY
  BASIC
}

enum State {
  CREATED
  UNCONFIRMED
  CONFIRMED
  OPENED
  CLOSED
  ENDED
}
